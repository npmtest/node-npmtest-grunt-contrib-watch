{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/lib.npmtest_grunt_contrib_watch.js":"/* istanbul instrument in package npmtest_grunt_contrib_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_watch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_watch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-watch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_watch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_watch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_watch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_watch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_watch.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_watch.__dirname + '/lib.npmtest_grunt_contrib_watch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/node_modules/grunt-contrib-watch/tasks/watch.js":"/*\n * grunt-contrib-watch\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar path = require('path');\nvar Gaze = require('gaze').Gaze;\nvar _ = require('lodash');\nvar waiting = 'Waiting...';\nvar changedFiles = Object.create(null);\nvar watchers = [];\n\nmodule.exports = function(grunt) {\n\n  var taskrun = require('./lib/taskrunner')(grunt);\n\n  // Default date format logged\n  var dateFormat = function(time) {\n    grunt.log.writeln(String(\n      'Completed in ' +\n      time.toFixed(3) +\n      's at ' +\n      (new Date()).toString()\n    ).cyan + ' - ' + waiting);\n  };\n\n  // When task runner has started\n  taskrun.on('start', function() {\n    Object.keys(changedFiles).forEach(function(filepath) {\n      // Log which file has changed, and how.\n      grunt.log.ok('File \"' + filepath + '\" ' + changedFiles[filepath] + '.');\n    });\n    // Reset changedFiles\n    changedFiles = Object.create(null);\n  });\n\n  // When task runner has ended\n  taskrun.on('end', function(time) {\n    if (time > 0) {\n      dateFormat(time);\n    }\n  });\n\n  // When a task run has been interrupted\n  taskrun.on('interrupt', function() {\n    grunt.log.writeln('').write('Scheduled tasks have been interrupted...'.yellow);\n  });\n\n  // When taskrun is reloaded\n  taskrun.on('reload', function() {\n    taskrun.clearRequireCache(Object.keys(changedFiles));\n    grunt.log.writeln('').writeln('Reloading watch config...'.cyan);\n  });\n\n  grunt.registerTask('watch', 'Run predefined tasks whenever watched files change.', function(target) {\n    var self = this;\n    var name = self.name || 'watch';\n\n    // Close any previously opened watchers\n    watchers.forEach(function(watcher) {\n      watcher.close();\n    });\n    watchers = [];\n\n    // Never gonna give you up, never gonna let you down\n    if (grunt.config([name, 'options', 'forever']) !== false) {\n      taskrun.forever();\n    }\n\n    // If a custom dateFormat function\n    var df = grunt.config([name, 'options', 'dateFormat']);\n    if (typeof df === 'function') {\n      dateFormat = df;\n    }\n\n    if (taskrun.running === false) {\n      grunt.log.writeln(waiting);\n    }\n\n    // Initialize taskrun\n    var targets = taskrun.init(name, {target: target});\n\n    targets.forEach(function(target) {\n      if (typeof target.files === 'string') {\n        target.files = [target.files];\n      }\n\n      // Process into raw patterns\n      var patterns = _.chain(target.files).flatten().map(function(pattern) {\n        return grunt.config.process(pattern);\n      }).value();\n\n      // Validate the event option\n      if (typeof target.options.event === 'string') {\n        target.options.event = [target.options.event];\n      }\n\n      var eventCwd = process.cwd();\n      if (target.options.cwd && target.options.cwd.event) {\n        eventCwd = target.options.cwd.event;\n      }\n\n      // Set cwd if options.cwd.file is set\n      if (typeof target.options.cwd !== 'string' && target.options.cwd.files) {\n        target.options.cwd = target.options.cwd.files;\n      }\n\n      // Create watcher per target\n      watchers.push(new Gaze(patterns, target.options, function(err) {\n        if (err) {\n          if (typeof err === 'string') {\n            err = new Error(err);\n          }\n          grunt.log.writeln('ERROR'.red);\n          grunt.fatal(err);\n          return taskrun.done();\n        }\n\n        // Log all watched files with --verbose set\n        if (grunt.option('verbose')) {\n          var watched = this.watched();\n          Object.keys(watched).forEach(function(watchedDir) {\n            watched[watchedDir].forEach(function(watchedFile) {\n              grunt.log.writeln('Watching ' + path.relative(process.cwd(), watchedFile) + ' for changes.');\n            });\n          });\n        }\n\n        // On changed/added/deleted\n        this.on('all', function(status, filepath) {\n\n          // Skip events not specified\n          if (!_.contains(target.options.event, 'all') &&\n              !_.contains(target.options.event, status)) {\n            return;\n          }\n\n          filepath = path.relative(eventCwd, filepath);\n\n          // Skip empty filepaths\n          if (filepath === '') {\n            return;\n          }\n\n          // If Gruntfile.js changed, reload self task\n          if (target.options.reload || /gruntfile\\.(js|coffee)/i.test(filepath)) {\n            taskrun.reload = true;\n          }\n\n          // Emit watch events if anyone is listening\n          if (grunt.event.listeners('watch').length > 0) {\n            grunt.event.emit('watch', status, filepath, target.name);\n          }\n\n          // Group changed files only for display\n          changedFiles[filepath] = status;\n\n          // Add changed files to the target\n          if (taskrun.targets[target.name]) {\n            if (!taskrun.targets[target.name].changedFiles) {\n              taskrun.targets[target.name].changedFiles = Object.create(null);\n            }\n            taskrun.targets[target.name].changedFiles[filepath] = status;\n          }\n\n          // Queue the target\n          if (taskrun.queue.indexOf(target.name) === -1) {\n            taskrun.queue.push(target.name);\n          }\n\n          // Run the tasks\n          taskrun.run();\n        });\n\n        // On watcher error\n        this.on('error', function(err) {\n          if (typeof err === 'string') {\n            err = new Error(err);\n          }\n          grunt.log.error(err.message);\n        });\n      }));\n    });\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/node_modules/grunt-contrib-watch/tasks/lib/livereload.js":"/*\n * grunt-contrib-watch\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar tinylr = require('tiny-lr');\nvar _ = require('lodash');\n\n// Holds the servers out of scope in case watch is reloaded\nvar servers = Object.create(null);\n\nmodule.exports = function(grunt) {\n\n  var defaults = {port: 35729};\n\n  function LR(options) {\n    if (options === true) {\n      options = defaults;\n    } else if (typeof options === 'number') {\n      options = {port: options};\n    } else {\n      options = _.defaults(options, defaults);\n    }\n\n    var host = (options.host || '*') + ':' + options.port;\n\n    if (servers[host]) {\n      this.server = servers[host];\n    } else {\n      this.server = tinylr(options);\n      this.server.server.removeAllListeners('error');\n      this.server.server.on('error', function(err) {\n        if (err.code === 'EADDRINUSE') {\n          grunt.fatal('Port ' + options.port + ' is already in use by another process.');\n        } else {\n          grunt.fatal(err);\n        }\n        process.exit(1);\n      });\n      this.server.listen(options.port, options.host, function(err) {\n        if (err) {\n          return grunt.fatal(err);\n        }\n        grunt.log.verbose.writeln('Live reload server started on ' + host);\n      });\n      servers[host] = this.server;\n    }\n  }\n\n  LR.prototype.trigger = function(files) {\n    grunt.log.verbose.writeln('Live reloading ' + grunt.log.wordlist(files) + '...');\n    this.server.changed({body: {files: files}});\n  };\n\n  return function(options) {\n    return new LR(options);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/node_modules/grunt-contrib-watch/tasks/lib/taskrun.js":"/*\n * grunt-contrib-watch\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Create a TaskRun on a target\n  function TaskRun(target) {\n    this.name = target.name || 0;\n    this.files = target.files || [];\n    this._getConfig = target._getConfig;\n    this.options = target.options;\n    this.startedAt = false;\n    this.spawned = null;\n    this.changedFiles = Object.create(null);\n    this.spawnTaskFailure = false;\n    this.livereloadOnError = true;\n    if (typeof this.options.livereloadOnError !== 'undefined') {\n      this.livereloadOnError = this.options.livereloadOnError;\n    }\n  }\n\n  var getErrorCount = function() {\n    if (typeof grunt.fail.forever_warncount !== 'undefined') {\n      return grunt.fail.forever_warncount + grunt.fail.forever_errorcount;\n    } else {\n      return grunt.fail.warncount + grunt.fail.errorcount;\n    }\n  };\n\n  // Run it\n  TaskRun.prototype.run = function(done) {\n    var self = this;\n\n    // Dont run if already running\n    if (self.startedAt !== false) {\n      return;\n    }\n\n    // Start this task run\n    self.startedAt = Date.now();\n\n    // reset before each run\n    self.spawnTaskFailure = false;\n    self.errorsAndWarningsCount = getErrorCount();\n\n    // pull the tasks here in case they were changed by a watch event listener\n    self.tasks = self._getConfig('tasks') || [];\n    if (typeof self.tasks === 'string') {\n      self.tasks = [self.tasks];\n    }\n\n    // If no tasks just call done to trigger potential livereload\n    if (self.tasks.length < 1) {\n      return done();\n    }\n\n    if (self.options.spawn === false || self.options.nospawn === true) {\n      grunt.task.run(self.tasks);\n      done();\n    } else {\n      self.spawned = grunt.util.spawn({\n        // Spawn with the grunt bin\n        grunt: true,\n        // Run from current working dir and inherit stdio from process\n        opts: {\n          cwd: self.options.cwd.spawn,\n          stdio: 'inherit'\n        },\n        // Run grunt this process uses, append the task to be run and any cli options\n        args: self.tasks.concat(self.options.cliArgs || [])\n      }, function(err, res, code) {\n        self.spawnTaskFailure = (code !== 0);\n        if (self.options.interrupt !== true || (code !== 130 && code !== 1)) {\n          // Spawn is done\n          self.spawned = null;\n          done();\n        }\n      });\n    }\n  };\n\n  // When the task run has completed\n  TaskRun.prototype.complete = function() {\n    var time = Date.now() - this.startedAt;\n    this.startedAt = false;\n    if (this.spawned) {\n      this.spawned.kill('SIGINT');\n      this.spawned = null;\n    }\n\n    var taskFailed = this.spawnTaskFailure || (getErrorCount() > this.errorsAndWarningsCount);\n    this.errorsAndWarningsCount = getErrorCount();\n\n    // Trigger livereload if necessary\n    if (this.livereload && (this.livereloadOnError || !taskFailed)) {\n      this.livereload.trigger(Object.keys(this.changedFiles));\n      this.changedFiles = Object.create(null);\n    }\n    return time;\n  };\n\n  return TaskRun;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-watch/node_modules/grunt-contrib-watch/tasks/lib/taskrunner.js":"/*\n * grunt-contrib-watch\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar path = require('path');\nvar EE = require('events').EventEmitter;\nvar util = require('util');\nvar _ = require('lodash');\nvar async = require('async');\n\n// Track which targets to run after reload\nvar reloadTargets = [];\n\n// A default target name for config where targets are not used (keep this unique)\nvar defaultTargetName = '_$_default_$_';\n\nmodule.exports = function(grunt) {\n\n  var TaskRun = require('./taskrun')(grunt);\n  var livereload = require('./livereload')(grunt);\n\n  function Runner() {\n    EE.call(this);\n    // Name of the task\n    this.name = 'watch';\n    // Options for the runner\n    this.options = {};\n    // Function to close the task\n    this.done = function() {};\n    // Targets available to task run\n    this.targets = Object.create(null);\n    // The queue of task runs\n    this.queue = [];\n    // Whether we're actively running tasks\n    this.running = false;\n    // If a nospawn task has ran (and needs the watch to restart)\n    this.nospawn = false;\n    // Set to true before run() to reload task\n    this.reload = false;\n    // For re-queuing arguments with the task that originally ran this\n    this.nameArgs = [];\n    // A list of changed files to feed to task runs for livereload\n    this.changedFiles = Object.create(null);\n  }\n  util.inherits(Runner, EE);\n\n  // Init a task for taskrun\n  Runner.prototype.init = function init(name, defaults, done) {\n    var self = this;\n\n    self.name = name || grunt.task.current.name || 'watch';\n    self.options = self._options(grunt.config([self.name, 'options']) || {}, defaults || {});\n    self.reload = false;\n    self.nameArgs = grunt.task.current.nameArgs ? grunt.task.current.nameArgs : self.name;\n\n    // Normalize cwd option\n    if (typeof self.options.cwd === 'string') {\n      self.options.cwd = {files: self.options.cwd, spawn: self.options.cwd};\n    }\n\n    // Function to call when closing the task\n    self.done = done || grunt.task.current.async();\n\n    // If a default livereload server for all targets\n    // Use task level unless target level overrides\n    var taskLRConfig = grunt.config([self.name, 'options', 'livereload']);\n    if (self.options.target && taskLRConfig) {\n      var targetLRConfig = grunt.config([self.name, self.options.target, 'options', 'livereload']);\n      if (targetLRConfig) {\n        // Dont use task level as target level will be used instead\n        taskLRConfig = false;\n      }\n    }\n    if (taskLRConfig) {\n      self.livereload = livereload(taskLRConfig);\n    }\n\n    // Return the targets normalized\n    var targets = self._getTargets(self.name);\n\n    if (self.running) {\n      // If previously running, complete the last run\n      self.complete();\n    } else if (reloadTargets.length > 0) {\n      // If not previously running but has items in the queue, needs run\n      self.queue = reloadTargets;\n      reloadTargets = [];\n      self.run();\n    } else {\n      if (!self.hadError) {\n        // Check whether target's tasks should run at start w/ atBegin option\n        self.queue = targets.filter(function(tr) {\n          return tr.options.atBegin === true && tr.tasks.length > 0;\n        }).map(function(tr) {\n          return tr.name;\n        });\n      } else {\n        // There was an error in atBegin task, we can't re-run it, as this would\n        // create an infinite loop of failing tasks\n        // See https://github.com/gruntjs/grunt-contrib-watch/issues/169\n        self.queue = [];\n        self.hadError = false;\n      }\n      if (self.queue.length > 0) {\n        self.run();\n      }\n    }\n\n    return targets;\n  };\n\n  // Normalize targets from config\n  Runner.prototype._getTargets = function _getTargets(name) {\n    var self = this;\n\n    grunt.task.current.requiresConfig(name);\n    var config = grunt.config(name);\n    var onlyTarget = self.options.target ? self.options.target : false;\n\n    var targets = (onlyTarget ? [onlyTarget] : Object.keys(config)).filter(function(key) {\n      if (key === 'options') {\n        return false;\n      }\n      return typeof config[key] !== 'string' && !Array.isArray(config[key]);\n    }).map(function(target) {\n      // Fail if any required config properties have been omitted\n      grunt.task.current.requiresConfig([name, target, 'files']);\n      var cfg = grunt.config([name, target]);\n      cfg.name = target;\n      cfg.options = self._options(cfg.options || {}, self.options);\n      self.add(cfg);\n      return cfg;\n    }, self);\n\n    // Allow \"basic\" non-target format\n    if (typeof config.files === 'string' || Array.isArray(config.files)) {\n      var cfg = {\n        files: config.files,\n        tasks: config.tasks,\n        name: defaultTargetName,\n        options: self._options(config.options || {}, self.options)\n      };\n      targets.push(cfg);\n      self.add(cfg);\n    }\n\n    return targets;\n  };\n\n  // Default options\n  Runner.prototype._options = function _options() {\n    var args = Array.prototype.slice.call(arguments).concat({\n      // The cwd to spawn within\n      cwd: process.cwd(),\n      // Additional cli args to append when spawning\n      cliArgs: _.without.apply(null, [[].slice.call(process.argv, 2)].concat(grunt.cli.tasks)),\n      interrupt: false,\n      nospawn: false,\n      spawn: true,\n      atBegin: false,\n      event: ['all'],\n      target: null\n    });\n    return _.defaults.apply(_, args);\n  };\n\n  // Run the current queue of task runs\n  Runner.prototype.run = _.debounce(function run() {\n    var self = this;\n    if (self.queue.length < 1) {\n      self.running = false;\n      return;\n    }\n\n    // Re-grab task options in case they changed between runs\n    self.options = self._options(grunt.config([self.name, 'options']) || {}, self.options);\n\n    // If we should interrupt\n    if (self.running === true) {\n      var shouldInterrupt = true;\n      self.queue.forEach(function(name) {\n        var tr = self.targets[name];\n        if (tr && tr.options.interrupt !== true) {\n          shouldInterrupt = false;\n          return false;\n        }\n      });\n      if (shouldInterrupt === true) {\n        self.interrupt();\n      } else {\n        // Dont interrupt the tasks running\n        return;\n      }\n    }\n\n    // If we should reload\n    if (self.reload) {\n      return self.reloadTask();\n    }\n\n    // Trigger that tasks runs have started\n    self.emit('start');\n    self.running = true;\n\n    // Run each target\n    var shouldComplete = true;\n    async.forEachSeries(self.queue, function(name, next) {\n      var tr = self.targets[name];\n      if (!tr) {\n        return next();\n      }\n\n      // Re-grab options in case they changed between runs\n      tr.options = self._options(grunt.config([self.name, name, 'options']) || {}, tr.options, self.options);\n\n      if (tr.options.spawn === false || tr.options.nospawn === true) {\n        shouldComplete = false;\n      }\n      tr.run(next);\n    }, function() {\n      if (shouldComplete) {\n        self.complete();\n      } else {\n        grunt.task.mark().run(self.nameArgs);\n        self.done();\n      }\n    });\n  }, 250);\n\n  // Push targets onto the queue\n  Runner.prototype.add = function add(target) {\n    var self = this;\n    if (!this.targets[target.name || 0]) {\n\n      // Private method for getting latest config for a watch target\n      target._getConfig = function(name) {\n        var cfgPath = [self.name];\n        if (target.name !== defaultTargetName) {\n          cfgPath.push(target.name);\n        }\n        if (name) {\n          cfgPath.push(name);\n        }\n        return grunt.config(cfgPath);\n      };\n\n      // Create a new TaskRun instance\n      var tr = new TaskRun(target);\n\n      // Add livereload to task runs\n      // Get directly from config as task level options are merged.\n      // We only want a single default LR server and then\n      // allow each target to override their own.\n      var lrconfig = grunt.config([this.name, target.name || 0, 'options', 'livereload']);\n      if (lrconfig) {\n        tr.livereload = livereload(lrconfig);\n      } else if (this.livereload && lrconfig !== false) {\n        tr.livereload = this.livereload;\n      }\n\n      return this.targets[tr.name] = tr;\n    }\n    return false;\n  };\n\n  // Do this when queued task runs have completed/scheduled\n  Runner.prototype.complete = function complete() {\n    var self = this;\n    if (self.running === false) {\n      return;\n    }\n    self.running = false;\n    var time = 0;\n    for (var i = 0, len = self.queue.length; i < len; ++i) {\n      var name = self.queue[i];\n      var target = self.targets[name];\n      if (!target) {\n        return;\n      }\n      if (target.startedAt !== false) {\n        time += target.complete();\n        self.queue.splice(i--, 1);\n        len--;\n\n        // if we're just livereloading and no tasks\n        // it can happen too fast and we dont report it\n        if (target.options.livereload && target.tasks.length < 1) {\n          time += 0.0001;\n        }\n      }\n    }\n    var elapsed = (time > 0) ? Number(time / 1000) : 0;\n    self.changedFiles = Object.create(null);\n    self.emit('end', elapsed);\n  };\n\n  // Run through completing every target in the queue\n  Runner.prototype._completeQueue = function _completeQueue() {\n    var self = this;\n    self.queue.forEach(function(name) {\n      var target = self.targets[name];\n      if (!target) {\n        return;\n      }\n      target.complete();\n    });\n  };\n\n  // Interrupt the running tasks\n  Runner.prototype.interrupt = function interrupt() {\n    var self = this;\n    self._completeQueue();\n    grunt.task.clearQueue();\n    self.emit('interrupt');\n  };\n\n  // Attempt to make this task run forever\n  Runner.prototype.forever = function forever() {\n    var self = this;\n    function rerun() {\n      // Clear queue and rerun to prevent failing\n      self._completeQueue();\n      grunt.task.clearQueue();\n      grunt.task.run(self.nameArgs);\n      self.running = false;\n      // Mark that there was an error and we needed to rerun\n      self.hadError = true;\n    }\n    grunt.fail.forever_warncount = 0;\n    grunt.fail.forever_errorcount = 0;\n    grunt.warn = grunt.fail.warn = function(e) {\n      grunt.fail.forever_warncount ++;\n      var message = typeof e === 'string' ? e : e.message;\n      grunt.log.writeln(('Warning: ' + message).yellow);\n      if (!grunt.option('force')) {\n        rerun();\n      }\n    };\n    grunt.fatal = grunt.fail.fatal = function(e) {\n      grunt.fail.forever_errorcount ++;\n      var message = typeof e === 'string' ? e : e.message;\n      grunt.log.writeln(('Fatal error: ' + message).red);\n      rerun();\n    };\n  };\n\n  // Clear the require cache for all passed filepaths.\n  Runner.prototype.clearRequireCache = function() {\n    // If a non-string argument is passed, it's an array of filepaths, otherwise\n    // each filepath is passed individually.\n    var filepaths = typeof arguments[0] !== 'string' ? arguments[0] : Array.prototype.slice(arguments);\n    // For each filepath, clear the require cache, if necessary.\n    filepaths.forEach(function(filepath) {\n      var abspath = path.resolve(filepath);\n      if (require.cache[abspath]) {\n        grunt.verbose.write('Clearing require cache for \"' + filepath + '\" file...').ok();\n        delete require.cache[abspath];\n      }\n    });\n  };\n\n  // Reload this watch task, like when a Gruntfile is edited\n  Runner.prototype.reloadTask = function() {\n    var self = this;\n    // Which targets to run after reload\n    reloadTargets = self.queue;\n    self.emit('reload', reloadTargets);\n\n    // Re-init the watch task config\n    grunt.task.init([self.name]);\n\n    // Complete all running tasks\n    self._completeQueue();\n\n    // Run the watch task again\n    grunt.task.run(self.nameArgs);\n    self.done();\n  };\n\n  return new Runner();\n};\n"}